// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MarginTrading.Services.Generated.SessionServiceApi
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for SessionService.
    /// </summary>
    public static partial class SessionServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            /// <param name='clientInfo'>
            /// </param>
            /// <param name='partnerId'>
            /// </param>
            public static void ApiSessionSavePost(this ISessionService operations, string clientId = default(string), string sessionToken = default(string), string clientInfo = default(string), string partnerId = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((ISessionService)s).ApiSessionSavePostAsync(clientId, sessionToken, clientInfo, partnerId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            /// <param name='clientInfo'>
            /// </param>
            /// <param name='partnerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiSessionSavePostAsync(this ISessionService operations, string clientId = default(string), string sessionToken = default(string), string clientInfo = default(string), string partnerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiSessionSavePostWithHttpMessagesAsync(clientId, sessionToken, clientInfo, partnerId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            public static ClientSessionModel ApiSessionGetPost(this ISessionService operations, string sessionToken = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ISessionService)s).ApiSessionGetPostAsync(sessionToken), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ClientSessionModel> ApiSessionGetPostAsync(this ISessionService operations, string sessionToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiSessionGetPostWithHttpMessagesAsync(sessionToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static System.Collections.Generic.IList<ClientSessionModel> ApiSessionGetByClientPost(this ISessionService operations, string clientId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ISessionService)s).ApiSessionGetByClientPostAsync(clientId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<ClientSessionModel>> ApiSessionGetByClientPostAsync(this ISessionService operations, string clientId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiSessionGetByClientPostWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            /// <param name='clientInfo'>
            /// </param>
            /// <param name='partnerId'>
            /// </param>
            public static void ApiSessionUpdateSessionPost(this ISessionService operations, string clientId = default(string), string sessionToken = default(string), string clientInfo = default(string), string partnerId = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((ISessionService)s).ApiSessionUpdateSessionPostAsync(clientId, sessionToken, clientInfo, partnerId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            /// <param name='clientInfo'>
            /// </param>
            /// <param name='partnerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiSessionUpdateSessionPostAsync(this ISessionService operations, string clientId = default(string), string sessionToken = default(string), string clientInfo = default(string), string partnerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiSessionUpdateSessionPostWithHttpMessagesAsync(clientId, sessionToken, clientInfo, partnerId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            public static void ApiSessionRefreshSessionPost(this ISessionService operations, string clientId = default(string), string sessionToken = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((ISessionService)s).ApiSessionRefreshSessionPostAsync(clientId, sessionToken), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiSessionRefreshSessionPostAsync(this ISessionService operations, string clientId = default(string), string sessionToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiSessionRefreshSessionPostWithHttpMessagesAsync(clientId, sessionToken, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            public static void ApiSessionDeleteSessionIfExistsPost(this ISessionService operations, string clientId = default(string), string sessionToken = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((ISessionService)s).ApiSessionDeleteSessionIfExistsPostAsync(clientId, sessionToken), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='sessionToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiSessionDeleteSessionIfExistsPostAsync(this ISessionService operations, string clientId = default(string), string sessionToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiSessionDeleteSessionIfExistsPostWithHttpMessagesAsync(clientId, sessionToken, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
